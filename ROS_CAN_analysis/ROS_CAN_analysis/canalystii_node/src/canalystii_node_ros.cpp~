#include "ros/ros.h"
#include "canalystii_node.h"
#include "canalystii_node_msg/can.h"
#include <geometry_msgs/Twist.h>
#include <ackermann_msgs/AckermannDrive.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/TwistStamped.h>

unsigned char control_type=2;
VCI_BOARD_INFO pInfo;//用来获取设备信息。
int count=0;//数据列表中，用来存储列表序号。
int wheel_speed_control= 0;
int steering_angle_control= 0;
int harry_speed=0;
int harry1=0;
int harry2=0;
int steering_angle_control_char=16384;
double harry6= 0;
double jiaoyan=0;
double wheel_speed_control_debug= 0;
double steering_angle_control_debug= 0;

void cmd_velCallback(const geometry_msgs::TwistStamped &harry)
{

  if(harry.twist.linear.x<0)
  {
    wheel_speed_control=-harry.twist.linear.x*3.6;
    control_type=3;
  }
  if(harry.twist.linear.x>0)
  {
    wheel_speed_control=harry.twist.linear.x*3.6;
    control_type=1;
  }
  if(harry.twist.linear.x==0)
  {
    wheel_speed_control=0;
    control_type=2;
  }
  jiaoyan=0;

}



void steerangle_callback(const std_msgs::Float32 &harry)
{
  steering_angle_control=-harry.data*154.947/12;
  if(steering_angle_control>5888)steering_angle_control=5888;
  if(steering_angle_control<-5888)steering_angle_control=-5888;
  else steering_angle_control=steering_angle_control;
  wheel_speed_control_debug=wheel_speed_control;

}



int main(int argc, char **argv){
      ros::init(argc, argv, "canalystii_node");
      CANalystii_node can_node;
      ros::NodeHandle nh;
      ros::Subscriber cmd_vel_sub = nh.subscribe("twist_cmd", 50, cmd_velCallback);
      ros::Subscriber steering_control= nh.subscribe("desired_steerangle_cmd", 50, steerangle_callback);
      if(!can_node.start_device())
      {
          ROS_WARN("device starts error");
          return -1;
      }
      ROS_INFO("listening to can bus");
      VCI_CAN_OBJ can_obj;
      printf(">>this is hello !\r\n");//指示程序已运行


      //初始化参数，严格参数二次开发函数库说明书。
      VCI_INIT_CONFIG config;
      config.AccCode=0x80000008;
      config.AccMask=0xFFFFFFFF;
      config.Filter=1;//接收所有帧
      config.Timing0=0x00;/*波特率500 Kbps  0x03  0x1C*/
      config.Timing1=0x1C;
      config.Mode=0;//正常模式
      unsigned int can_idx = 0;
      if(VCI_InitCAN(VCI_USBCAN2,0,0,&config)!=1)
      {
        printf(">>Init CAN1 error\n");
        VCI_CloseDevice(VCI_USBCAN2,0);
      }

      if(VCI_StartCAN(VCI_USBCAN2,0,0)!=1)
      {
        printf(">>Start CAN1 error\n");
        VCI_CloseDevice(VCI_USBCAN2,0);

      }

      if(VCI_InitCAN(VCI_USBCAN2,0,1,&config)!=1)
      {
        printf(">>Init can2 error\n");
        VCI_CloseDevice(VCI_USBCAN2,0);

      }
      if(VCI_StartCAN(VCI_USBCAN2,0,1)!=1)
      {
        printf(">>Start can2 error\n");
        VCI_CloseDevice(VCI_USBCAN2,0);

      }
      //需要发送的帧，结构体设置
      VCI_CAN_OBJ send[1];
      send[0].ID=0;
      send[0].SendType=0;
      send[0].RemoteFlag=0;
      send[0].ExternFlag=1;
      send[0].DataLen=8;

      int i=0;
      for(i = 0; i < send[0].DataLen; i++)
      {
        send[0].Data[i] = i;
      }

      ros::Rate r(10.0);
      while(ros::ok())
      {
        jiaoyan+=1;
        if(jiaoyan>=4)wheel_speed_control=0;
        if(jiaoyan<4)wheel_speed_control=wheel_speed_control;
        if(jiaoyan>20)jiaoyan=4;
        ros::spinOnce();
        unsigned int recv_len = 1;
        if(VCI_Transmit(VCI_USBCAN2, 0, 0, send, 1) == 1)
        {

          send[0].ID=387;
          send[0].TimeFlag=1;
          send[0].SendType=0;
          send[0].RemoteFlag=0;
          send[0].ExternFlag=0;
          send[0].DataLen=8;
          harry_speed=wheel_speed_control;
          send[0].Data[0]=harry_speed;
          steering_angle_control_char=16384-steering_angle_control;//10496~22272
          send[0].Data[1]=steering_angle_control_char>>8;
          send[0].Data[2]=steering_angle_control_char;
          send[0].Data[3]=control_type;
          send[0].Data[4]=1;
          send[0].Data[5]=1;
          send[0].Data[6]=1;
          send[0].Data[7]=send[0].Data[0]+send[0].Data[1]+send[0].Data[2]+send[0].Data[3]+send[0].Data[4]+send[0].Data[5]+send[0].Data[6];//harry_speed+steering_angle_control_char+3+control_type;//harry_speed+255-harry1+255-harry2+control_type+3;
          harry6=jiaoyan;
          ROS_INFO("harry1  is %f", harry6);
        }

//        if(can_node.receive_can_frame(can_idx,can_obj,recv_len,20))
//        {
//          canalystii_node_msg::can msg = CANalystii_node::can_obj2msg(can_obj);
//          can_node.can_msg_pub_.publish(msg);
//        }
        r.sleep();

      }

    return 0;
}




        // if(can_node.receive_can_frame(can_idx,can_obj,recv_len,20))
        // {
        //   canalystii_node_msg::can msg = CANalystii_node::can_obj2msg(can_obj);
        //   if(msg.id == 388){
        //     // get the speed
        //     if (msg.data[3] == 1){
        //       //D dang
        //       current_speed = msg.data[0];
        //     }else if(msg.data[3] == 3){
        //       // R dang
        //       current_speed = -msg.data[0];
        //     }else{
        //       // N 
        //       current_speed = 0;
        //     } 
        //   }
        // }
        // pid_result = pid.calculate(wheel_speed_control, current_speed);
        // wheel_speed_control = pid_result;
